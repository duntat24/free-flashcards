import AddFlashcardButton from '../../AddFlashcardButton.js';
import NewFlashcard from './NewFlashcard.js';
import SaveNewSetButton from './SaveNewSetButton.js';
import { useState } from 'react';

/*
    TODO: The props likely need a way to trigger a hook to make another fetch to the API - otherwise our additions won't be reflected on the home page
*/
export default function CreateFlashcardSet() {
    const [cards, updateCards] = useState([]);
    // we use the ID for displaying, deleting, & updating the cards - the card's ID on the backend is generated by the server
    const [nextCardId, updateNextCardId] = useState(0);
    const [setTitle, updateSetTitle] = useState("");

    function addCard() { // this adds a blank card to the newly created set
        updateCards([...cards, {id: nextCardId, prompt: "", response: ""}]);
        updateNextCardId(nextCardId + 1);
    }
    function removeCard(removedId) {
        updateCards(cards.filter(card => card.id !== removedId)); // finding and removing the card with the specified id
    }
    function updateCard(newPrompt, newResponse, cardId, newFileJSON) { // this is used to update cards when the user edits a prompt or response
        updateCards(cards.map(card => 
            card.id === cardId ? {id: cardId, prompt: newPrompt, response: newResponse, fileJSON: newFileJSON}: card
        ));
    }
    function saveSet() {
        /*
            Need to make an API call here
        */
        console.log(cards);
        console.log(validateCards(cards));
        
        // first need to validate that all the cards have a valid state - non-empty prompt and response
        // if they have a file they must indicate whether it is for the prompt or response - whether the file is valid is handled for us by the NewFlashcard component

        // once all flashcards are validated, we should POST a new study set with the specified title
        // then, we should iterate through each card and initiate an ASYNCHRONOUS request
            // if the request contains a file, we need to then call 

        /* updateCards([]); // clear the existing cards to make it simpler for the user to create another new set
        updateSetTitle(""); // clear the set title to make it easier for the user

        we will add this functionality back when we finish making the API call - don't want to re-enter every time we test
        */ 
    }

    let cardList = cards.map(card => (
        <li key={card.id} className="new-flashcard"> 
            <NewFlashcard
                card={card}
                removeCard={removeCard}
                updateCard={updateCard}
            />
        </li>
    ));
    
    return <div className="new-flashcard-set">
        <AddFlashcardButton 
            addCard={addCard}
        />
        <SaveNewSetButton
            save={saveSet}
        /> <br/>
        <label htmlFor="set-title">Set Title:</label>
        <input type="text" name="set-title" id="set-title" value={setTitle} 
            onChange={(e) => updateSetTitle(e.target.value)}></input>
        <ul className="new-card-list">
            {cardList}
        </ul>
    </div>
}

// this method validates the provided array of cards so they can be stored on the server
function validateCards(cards) {
    for (let i = 0; i < cards.length; i++) {
        const currentCard = cards[i];
        if (currentCard.prompt === "" || currentCard.response === "") { // prompt and response can't be null
            return false;
        }
        if (currentCard.fileJSON.file !== null && currentCard.fileJSON.isPrompt === null) { // user must indicate where a file should be displayed as part of a card 
            return false;
        }
    }
    return true;
}